~ install django
python -m pip install Django

~ django version
python -m django --version

~ dev server
python manage.py runserver
python manage.py runserver 8080

~ create an app
python manage.py startapp polls

~ install extras
pip install pymysql

~ generate migrations from models
python manage.py makemigrations polls
    detects alterations

~ migrate
python manage.py migrate

~ shell like tinker
python manage.py shell

~ model operations
from django.utils import timezone
from polls.models import Choice, Question

    get all
        Question.objects.all()

    create
        q = Question(question_text="What's new?", pub_date=timezone.now())
        q.save()
        q.id

    view
        q.question_text
        q.pub_date

    update
        q.question_text = "What's up?"
        q.save()

    filter
        Question.objects.filter(id=1)
        Question.objects.filter(question_text__startswith='What')

        current_year = timezone.now().year
        Question.objects.get(pub_date__year=current_year)

        q = Question.objects.get(pk=1)
        q.was_published_recently()

    relationships
        q = Question.objects.get(pk=1)
        q.choice_set.all()

        create choices under question
            q.choice_set.create(choice_text='Not much', votes=0)
            q.choice_set.create(choice_text='The sky', votes=0)
            c = q.choice_set.create(choice_text='Just hacking again', votes=0)

        view parent
            c.question

        parent to child
            # By default, this Manager is named FOO_set, where FOO is the source model name, lowercased.
            # This Manager returns QuerySets, which can be filtered and manipulated
            q.choice_set.all()
            q.choice_set.count()

        delete
            c = q.choice_set.filter(choice_text__startswith='Just hacking')
            c.delete()


        # The API automatically follows relationships as far as you need.
        # Use double underscores to separate relationships.
        # This works as many levels deep as you want; there's no limit.
        # Find all Choices for any question whose pub_date is in this year
        # (reusing the 'current_year' variable we created above).
        Choice.objects.filter(question__pub_date__year=current_year)